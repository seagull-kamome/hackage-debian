Source: haskell-storable-record
Priority: extra
Section: haskell
Maintainer: HATTORI,Hiroki <seagull.kamome@gmail.com>
Uploaders: HATTORI,Hiroki <seagull.kamome@gmail.com>
Vcs-Darcs: http://darcs.debian.org/pkg-haskell/haskell-storable-record
Vcs-Browser: http://darcs.debian.org/cgh-bin/darcsweb.cgi?r=pkg-haskell/haskell-storable-record
DM-Upload-Allowed: yes
Build-Depends: debhelper (>= 7.0),
               haskell-devscripts (>= 0.8),
               cdbs,
               ghc,
               ghc-prof,
               libghc-base-dev (>= 3) | ghc,
               libghc-base-dev (<< 6) | ghc,
               libghc-base-prof (>= 3) | ghc-prof,
               libghc-base-prof (<< 6) | ghc-prof,
               libghc-transformers-dev (>= 0.2),
               libghc-transformers-dev (<< 0.4),
               libghc-transformers-prof (>= 0.2),
               libghc-transformers-prof (<< 0.4),
               libghc-utility-ht-dev (>= 0.0.1),
               libghc-utility-ht-dev (<< 0.1),
               libghc-utility-ht-prof (>= 0.0.1),
               libghc-utility-ht-prof (<< 0.1)
Build-Depends-Indep: ghc-doc,
                     libghc-base-doc (>= 3) | ghc-doc,
                     libghc-base-doc (<< 6) | ghc-doc,
                     libghc-transformers-doc (>= 0.2),
                     libghc-transformers-doc (<< 0.4),
                     libghc-utility-ht-doc (>= 0.0.1),
                     libghc-utility-ht-doc (<< 0.1)
Standards-Version: 3.9.1
Homepage: http://code.haskell.org/~thielema/storable-record/

Package: libghc-storable-record-dev
Architecture: any
Depends: ${shlibs:Depends},
         ${haskell:Depends},
         ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: Elegant definition of Storable instances for records
 With this package
 you can build a Storable instance of a record type
 from Storable instances of its elements in an elegant way.
 It does not do any magic,
 just a bit arithmetic to compute the right offsets,
 that would be otherwise done manually
 or by a preprocessor like C2HS.
 I cannot promise that the generated memory layout
 is compatible with that of a corresponding C struct.
 However, the module generates the smallest layout
 that is possible with respect to the alignment of the record elements.
 If you encounter, that a record does not have a compatible layout,
 we should fix that.
 But also without C compatibility this package is useful
 e.g. in connection with StorableVector.
 .
 We provide Storable instance support for several cases:
 .
 * If you wrap a type in a @newtype@,
 then you can lift its 'Storable' instance to that @newtype@
 with the module "Foreign.Storable.Newtype".
 This way you do not need the @GeneralizedNewtypeDeriving@ feature of GHC.
 .
 * If you have a type that is an instance of 'Traversable',
 you can use that feature for implementation of 'Storable' methods.
 The module "Foreign.Storable.Traversable"
 allows manipulation of the portion of your type,
 that is accessible by 'Traversable' methods.
 For instance with the type
 @data T a = Cons Int [a]@
 and an according 'Traversable' implementation,
 you can load and store the elements of the contained list.
 This may be part of a 'Storable' implementation of the whole type.
 .
 * If you have a record containing elements of various types,
 then you need module "Foreign.Storable.Record".
 .
 Note however that the Storable instances
 defined with this package are quite slow in (up to) GHC-6.12.1.
 I'm afraid this is due to incomplete inlining,
 but we have still to investigate the problem.
 .
 For examples see packages @storable-tuple@ and @sample-frame@.
 .
  Author: Henning Thielemann <storable@henning-thielemann.de>
  Upstream-Maintainer: Henning Thielemann <storable@henning-thielemann.de>
 .
 This package contains the normal library files.

Package: libghc-storable-record-prof
Architecture: any
Depends: ${haskell:Depends},
         ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Provides: ${haskell:Provides}
Description: Elegant definition of Storable instances for records
 With this package
 you can build a Storable instance of a record type
 from Storable instances of its elements in an elegant way.
 It does not do any magic,
 just a bit arithmetic to compute the right offsets,
 that would be otherwise done manually
 or by a preprocessor like C2HS.
 I cannot promise that the generated memory layout
 is compatible with that of a corresponding C struct.
 However, the module generates the smallest layout
 that is possible with respect to the alignment of the record elements.
 If you encounter, that a record does not have a compatible layout,
 we should fix that.
 But also without C compatibility this package is useful
 e.g. in connection with StorableVector.
 .
 We provide Storable instance support for several cases:
 .
 * If you wrap a type in a @newtype@,
 then you can lift its 'Storable' instance to that @newtype@
 with the module "Foreign.Storable.Newtype".
 This way you do not need the @GeneralizedNewtypeDeriving@ feature of GHC.
 .
 * If you have a type that is an instance of 'Traversable',
 you can use that feature for implementation of 'Storable' methods.
 The module "Foreign.Storable.Traversable"
 allows manipulation of the portion of your type,
 that is accessible by 'Traversable' methods.
 For instance with the type
 @data T a = Cons Int [a]@
 and an according 'Traversable' implementation,
 you can load and store the elements of the contained list.
 This may be part of a 'Storable' implementation of the whole type.
 .
 * If you have a record containing elements of various types,
 then you need module "Foreign.Storable.Record".
 .
 Note however that the Storable instances
 defined with this package are quite slow in (up to) GHC-6.12.1.
 I'm afraid this is due to incomplete inlining,
 but we have still to investigate the problem.
 .
 For examples see packages @storable-tuple@ and @sample-frame@.
 .
  Author: Henning Thielemann <storable@henning-thielemann.de>
  Upstream-Maintainer: Henning Thielemann <storable@henning-thielemann.de>
 .
 This package contains the libraries compiled with profiling enabled.

Package: libghc-storable-record-doc
Architecture: all
Section: doc
Depends: ${haskell:Depends},
         ${misc:Depends}
Recommends: ${haskell:Recommends}
Suggests: ${haskell:Suggests}
Description: Elegant definition of Storable instances for records
 With this package
 you can build a Storable instance of a record type
 from Storable instances of its elements in an elegant way.
 It does not do any magic,
 just a bit arithmetic to compute the right offsets,
 that would be otherwise done manually
 or by a preprocessor like C2HS.
 I cannot promise that the generated memory layout
 is compatible with that of a corresponding C struct.
 However, the module generates the smallest layout
 that is possible with respect to the alignment of the record elements.
 If you encounter, that a record does not have a compatible layout,
 we should fix that.
 But also without C compatibility this package is useful
 e.g. in connection with StorableVector.
 .
 We provide Storable instance support for several cases:
 .
 * If you wrap a type in a @newtype@,
 then you can lift its 'Storable' instance to that @newtype@
 with the module "Foreign.Storable.Newtype".
 This way you do not need the @GeneralizedNewtypeDeriving@ feature of GHC.
 .
 * If you have a type that is an instance of 'Traversable',
 you can use that feature for implementation of 'Storable' methods.
 The module "Foreign.Storable.Traversable"
 allows manipulation of the portion of your type,
 that is accessible by 'Traversable' methods.
 For instance with the type
 @data T a = Cons Int [a]@
 and an according 'Traversable' implementation,
 you can load and store the elements of the contained list.
 This may be part of a 'Storable' implementation of the whole type.
 .
 * If you have a record containing elements of various types,
 then you need module "Foreign.Storable.Record".
 .
 Note however that the Storable instances
 defined with this package are quite slow in (up to) GHC-6.12.1.
 I'm afraid this is due to incomplete inlining,
 but we have still to investigate the problem.
 .
 For examples see packages @storable-tuple@ and @sample-frame@.
 .
  Author: Henning Thielemann <storable@henning-thielemann.de>
  Upstream-Maintainer: Henning Thielemann <storable@henning-thielemann.de>
 .
 This package contains the documentation files.

Package: haskell-storable-record-utils
Architecture: any
Section: misc
Depends: ${shlibs:Depends}, ${haskell:Depends}, ${misc:Depends}
Description:  An executable built with the storable-record-0.0.2.5 library.
